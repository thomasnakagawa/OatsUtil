using System.Text;
using UnityEngine;

namespace OatsUtil
{
    public static class StringExtensions
    {
        /// <summary>
        /// Adds a number and "s" to a string. Ex: "thing".Plural(5) => "5 things", "thing".Plural(1) => "1 thing", "fish".Plural(3, "es") => "3 fishes"
        /// </summary>
        /// <param name="noun">The string to pluralize</param>
        /// <param name="count">Number to put before noun</param>
        /// <param name="suffix">Optional, the string to add to the end of the noun when plural</param>
        /// <returns>The string with the number in front and plural suffix at the end</returns>
        public static string Plural(this string noun, int count, string suffix = "s")
        {
            if (suffix == null)
            {
                throw new System.ArgumentNullException("suffix", "suffix cannot be null");
            }

            if (count == 1)
            {
                return count + " " + noun;
            }
            else
            {
                return count + " " + noun + suffix;
            }
        }

        /// <summary>
        /// Wraps string in quotes
        /// </summary>
        /// <param name="str">String to wrap in quotes</param>
        /// <returns>The string wrapped in quotes</returns>
        public static string Quote(this string str)
        {
            return "\"" + str + "\"";
        }

        /// <summary>
        /// Wraps a string in bold tags
        /// </summary>
        /// <param name="str">String to bold</param>
        /// <returns>String with bold tags around it</returns>
        public static string Bold(this string str)
        {
            return str.Tag("<b>");
        }

        /// <summary>
        /// Wraps a string in italic tags
        /// </summary>
        /// <param name="str">String to italisize</param>
        /// <returns>String with italic tags around it</returns>
        public static string Italic(this string str)
        {
            return str.Tag("<i>");
        }

        /// <summary>
        /// Wraps a string in color tags
        /// </summary>
        /// <param name="str">String to color</param>
        /// <param name="color">Color value to make the text</param>
        /// <returns>String with color tags around it</returns>
        public static string Color(this string str, Color color)
        {
            if (color == null)
            {
                throw new System.ArgumentNullException("color", "color cannot be null");
            }

            return str.Tag("<color=" + color + ">", "</color>");
        }

        /// <summary>
        /// Wraps a string in color tags
        /// </summary>
        /// <param name="str">String to color</param>
        /// <param name="color">Color string to make the text</param>
        /// <returns>String with color tags around it</returns>
        public static string Color(this string str, string color)
        {
            if (color == null)
            {
                throw new System.ArgumentNullException("color", "color cannot be null");
            }

            return str.Tag("<color=" + color + ">", "</color>");
        }

        /// <summary>
        /// Wraps a string in size tags
        /// </summary>
        /// <param name="str">String to set size of</param>
        /// <param name="size">Size to set the string to</param>
        /// <returns>String with size tags around it</returns>
        public static string Size(this string str, string size)
        {
            if (size == null)
            {
                throw new System.ArgumentNullException("size", "size cannot be null");
            }
            return str.Tag("<size=" + size + ">", "</size>");
        }


        /// <summary>
        /// Wraps a string in tags. If only the opening tag is specifies, a closing tag will be generated by inserting a / character.
        /// </summary>
        /// <param name="str">The string to wrap tags around</param>
        /// <param name="tag">The opening tag </param>
        /// <param name="customEndTag">The closing tag. Optional, a default one will be generated if not specified</param>
        /// <returns>String with tags around it</returns>
        public static string Tag(this string str, string tag, string customEndTag = null)
        {
            if (tag == null)
            {
                throw new System.ArgumentNullException("tag", "tag argument cannot be null");
            }
            if (tag.Length < 3 || tag[0] != '<')
            {
                throw new System.ArgumentException("Tag must be in <a> format");
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(tag);
            stringBuilder.Append(str);
            if (customEndTag == null)
            {
                stringBuilder.Append(tag.Insert(1, "/"));
            }
            else
            {
                stringBuilder.Append(customEndTag);
            }
            return stringBuilder.ToString();
        }
    }
}
